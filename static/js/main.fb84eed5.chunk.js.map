{"version":3,"sources":["DAL/API/api.ts","BLL/reducers/dataReducer.tsx","BLL/Tools/FingerPrint.ts","BLL/reducers/fingerPrintReducer.tsx","BLL/reducers/visitorCounterReducer.tsx","BLL/reducers/usersReducer.tsx","BLL/reducers/appReducer.tsx","App.tsx","reportWebVitals.ts","BLL/Store/redux-store.ts","index.tsx"],"names":["UserAPI","axios","get","response","data","num","put","count","payload","users","initialState","businessName","businessWebsite","city","continent","country","countryCode","ipName","ipType","isp","lat","lon","org","query","region","status","SET_DATA","getfp","a","FingerprintJS","load","fp","result","visitorId","setUsersDataAC","type","initialized","SET_INITIALIZED","App","this","props","setInitializedTC","viewCount","React","Component","connect","store","app","ip","currentIpUserInfo","provider","dispatch","fingerPrint","getState","id","currentFPUserInfo","newId","savedUsers","filter","el","length","viewCountData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thinkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb84eed5.chunk.js","sourcesContent":["import axios from \"axios\"\r\nimport {UsersType} from \"../../BLL/reducers/usersReducer\";\r\n\r\nexport const UserAPI = {\r\n    async getIpData() {\r\n        let response = await axios.get(`https://extreme-ip-lookup.com/json`)\r\n        return response.data\r\n    },\r\n    async getViewCountData() {\r\n        let response = await axios.get(`https://counter-d86e4.firebaseio.com/count.json`)\r\n        return response.data\r\n    },\r\n    async incrementCount(num: number) {\r\n        let response = await axios.put(`https://counter-d86e4.firebaseio.com/count.json`, {count: num})\r\n        return response.data\r\n    },\r\n\r\n    async writeInformation(payload:UsersType) {\r\n        let response = await axios.put(`https://counter-d86e4.firebaseio.com/userDdata.json`, {users:payload.users})\r\n        return response.data\r\n    },\r\n    async getUsersInfo(){\r\n        let response = await axios.get(`https://counter-d86e4.firebaseio.com/userDdata.json`)\r\n        return response.data\r\n    }\r\n}\r\n","import {UserAPI} from \"../../DAL/API/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setFingerPrintTC} from \"./fingerPrintReducer\";\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype DataType = {\r\n    businessName: string\r\n    businessWebsite: string\r\n    city: string\r\n    continent: string\r\n    country: string\r\n    countryCode: string\r\n    ipName: string\r\n    ipType: string\r\n    isp: string\r\n    lat: string\r\n    lon: string\r\n    org: string\r\n    query: string\r\n    region: string\r\n    status: string\r\n}\r\n\r\nlet initialState: DataType = {\r\n    businessName: \" \",\r\n    businessWebsite: \"\",\r\n    city: \"\",\r\n    continent: \"\",\r\n    country: \"\",\r\n    countryCode: \"\",\r\n    ipName: \"\",\r\n    ipType: \"\",\r\n    isp: \"\",\r\n    lat: \"\",\r\n    lon: \"\",\r\n    org: \"\",\r\n    query: \"\",\r\n    region: \"\",\r\n    status: \"\"\r\n}\r\n\r\nexport const dataReducer = (state: DataType = initialState, action: ActionType): DataType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"dataReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: DataType\r\n}\r\nexport const setDataAC = (payload: DataType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setDataTC = () => async (dispatch: Dispatch<any>) => {\r\n    let response = await UserAPI.getIpData()\r\n    dispatch(setDataAC(response));\r\n\r\n\r\n}\r\n","import FingerprintJS from '@fingerprintjs/fingerprintjs'\r\n\r\nexport async function getfp() {\r\n    const fp = await FingerprintJS.load()\r\n    const result = await fp.get()\r\n    return result\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {getfp} from \"../Tools/FingerPrint\";\r\nimport {setUsersDataTC} from \"./usersReducer\";\r\n\r\ntype ActionType = SetDataAT\r\n/*type FingerPrintType = {\r\n    audio: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    availableScreenResolution: {\r\n        value: Array<number>\r\n        duration: number\r\n    }\r\n    canvas: {\r\n        value: {\r\n            data: string\r\n            winding: boolean\r\n        }\r\n        duration: number\r\n    }\r\n    chrome: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    colorDepth: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    cookiesEnabled: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    cpuClass: {\r\n        value: any\r\n        duration: number\r\n    }\r\n    deviceMemory: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    emptyEvalLength: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    errorFF: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    fonts: {\r\n        value: Array<string>\r\n        duration: number\r\n    }\r\n    hardwareConcurrency: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    indexedDB: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    languages: {\r\n        value: Array<Array<string>>\r\n        duration: number\r\n    }\r\n    localStorage: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    openDatabase: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    osCpu: {\r\n        value: any\r\n        duration: number\r\n    }\r\n    platform: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    plugins: {\r\n        value: Array<{\r\n            description: string\r\n            name: string\r\n            mimeTypes: Array<{\r\n                suffixes: string\r\n                type: string\r\n            }>\r\n        }>\r\n        duration: number\r\n    }\r\n    pluginsSupport: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    productSub: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    screenResolution: {\r\n        value: Array<number>\r\n        duration: number\r\n    }\r\n    sessionStorage: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    timezone: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    timezoneOffset: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    touchSupport: {\r\n        value: {\r\n            maxTouchPoints: number\r\n            touchEvent: boolean\r\n            touchStart: boolean\r\n        }\r\n        duration: number\r\n    }\r\n    vendor: {\r\n        value: string\r\n        duration: number\r\n    }\r\n}*/\r\ntype FingerPrintType = {\r\n    visitorId: string\r\n}\r\nlet initialState: FingerPrintType = {\r\n    visitorId: \"\"\r\n}\r\n\r\nexport const fingerPrintReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                visitorId: action.payload.visitorId\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"fingerPrintReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: FingerPrintType\r\n}\r\nexport const setDataAC = (payload: any): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setFingerPrintTC = () => async (dispatch: Dispatch<any>) => {\r\n    let fingerPrint = await getfp()\r\n    dispatch(setDataAC(fingerPrint))\r\n\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {UserAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"../Store/redux-store\";\r\nimport {getfp} from \"../Tools/FingerPrint\";\r\nimport {setUsersDataTC} from \"./usersReducer\";\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype ViewCountType = {\r\n    count: number\r\n}\r\nlet initialState: ViewCountType = {\r\n    count: 0\r\n}\r\n\r\nexport const viewCounterReducer = (state: ViewCountType = initialState, action: ActionType): ViewCountType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                count: action.payload.count\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"counterReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: ViewCountType\r\n}\r\nexport const setCountDataAC = (payload: ViewCountType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setViewCountDataTC = () => async (dispatch: Dispatch<any>, getState: () => StateType) => {\r\n\r\n    let viewCountData = await UserAPI.getViewCountData()\r\n    dispatch(setCountDataAC(viewCountData))\r\n\r\n\r\n    let newId = getState().currentFPUserInfo.visitorId\r\n    let filteredArray = getState().savedUsers.users.filter(el => el.id === newId)\r\ndebugger\r\n    if (filteredArray.length === 0) {\r\n        const count = getState().viewCount.count += 1\r\n        await UserAPI.incrementCount(count)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {UserAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"../Store/redux-store\";\r\nimport {getfp} from \"../Tools/FingerPrint\";\r\nimport {setViewCountDataTC} from \"./visitorCounterReducer\";\r\n\r\n/*\r\ntype UserType = {\r\n    user: {\r\n        id: string\r\n        ip: string\r\n    }\r\n\r\n}\r\ntype UsersType = {\r\n    users: UserType\r\n    usersCount: number\r\n}\r\nlet initialState: UsersType = {\r\n    usersCount: 0,\r\n    users: {\r\n        user: {id: \"\", ip: \"\"},\r\n        user:{id: \"\", ip: \"\"}\r\n    }\r\n}\r\n*/\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype UserType = {\r\n    id: string\r\n    ip: string\r\n}\r\nexport type UsersType = {\r\n    users: UserType[]\r\n\r\n}\r\nlet initialState: UsersType = {\r\n\r\n    users: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: ActionType): UsersType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n\r\n                users: [...state.users, ...action.payload.users]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"usersReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: UsersType\r\n}\r\nexport const setUsersDataAC = (payload: UsersType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setUsersDataTC = () => async (dispatch: Dispatch<any>, getState: () => StateType) => {\r\n    let response = await UserAPI.getUsersInfo()\r\n    dispatch(setUsersDataAC(response))\r\n\r\n    let id = getState().currentFPUserInfo.visitorId\r\n    let ip = getState().currentIpUserInfo.query\r\n\r\n    let newId = getState().currentFPUserInfo.visitorId\r\n    let filteredArray = getState().savedUsers.users.filter(el => el.id === newId)\r\ndebugger\r\n    if (filteredArray.length === 0) {\r\n        dispatch(setUsersDataAC({users: [{id, ip}]}))\r\n        UserAPI.writeInformation(getState().savedUsers)\r\n    }\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {setDataTC} from \"./dataReducer\";\r\nimport {setFingerPrintTC} from \"./fingerPrintReducer\";\r\nimport {setViewCountDataTC} from \"./visitorCounterReducer\";\r\nimport {setUsersDataTC} from \"./usersReducer\";\r\n\r\n\r\ntype ActionType = SetInitializedAT\r\n\r\ntype InitializedType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitializedType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitializedType = initialState, action: ActionType): InitializedType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-INITIALIZED-AC-------------------------------\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\ntype SetInitializedAT = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\nexport const setInitializedAC = (): SetInitializedAT => ({\r\n    type: SET_INITIALIZED\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setInitializedTC = () => async (dispatch: Dispatch<any>) => {\r\n\r\n     await dispatch(setDataTC())\r\n     await dispatch(setFingerPrintTC())\r\n     await dispatch(setUsersDataTC())\r\n     await dispatch(setViewCountDataTC())\r\n\r\n    dispatch(setInitializedAC())\r\n\r\n    /*Promise.all([pr1, pr2]).then(() => {\r\n        Promise.all([pr3]).then(() => {\r\n            Promise.all([pr4]).then(()=>{\r\n\r\n            })\r\n        })\r\n    })*/\r\n\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"./BLL/Store/redux-store\";\r\nimport {setInitializedTC} from \"./BLL/reducers/appReducer\";\r\n\r\ntype MSTP = {\r\n    initialized: boolean\r\n    ip: string\r\n    ipName: string\r\n    viewCount: number\r\n    city: string\r\n    country: string\r\n    provider: string\r\n}\r\ntype MDTP = {\r\n    setInitializedTC: () => void\r\n}\r\ntype AppPropsType = MSTP & MDTP\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n\r\n        this.props.setInitializedTC()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return \"Loading\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n               {/* <div>{`Ваш IP адрес : ${this.props.ip}`}</div>\r\n                <div>{`Имя вашего компьютера : ${this.props.ipName}`}</div>\r\n                <div>{`Ваше местоположение: : ${this.props.country}, ${this.props.city}`}</div>\r\n                <div>{`Ваш провайдер : ${this.props.provider}`}</div>*/}\r\n                <div>{`Количество посещений : ${this.props.viewCount}`}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store: StateType) => ({\r\n    initialized: store.app.initialized,\r\n    ip: store.currentIpUserInfo.query,\r\n    ipName: store.currentIpUserInfo.ipName,\r\n    viewCount: store.viewCount.count,\r\n    city: store.currentIpUserInfo.region,\r\n    country: store.currentIpUserInfo.country,\r\n    provider: store.currentIpUserInfo.org\r\n})\r\n\r\nexport default connect(mapStateToProps, {setInitializedTC})(App)\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thinkMiddleware from \"redux-thunk\"\r\nimport {appReducer} from \"../reducers/appReducer\";\r\nimport {dataReducer} from \"../reducers/dataReducer\";\r\nimport {fingerPrintReducer} from \"../reducers/fingerPrintReducer\";\r\nimport {viewCounterReducer} from \"../reducers/visitorCounterReducer\";\r\nimport {usersReducer} from \"../reducers/usersReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    currentIpUserInfo: dataReducer,\r\n    currentFPUserInfo: fingerPrintReducer,\r\n    viewCount: viewCounterReducer,\r\n    savedUsers: usersReducer\r\n})\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thinkMiddleware)))\r\nexport type StateType = ReturnType<typeof reducers>\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./BLL/Store/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}