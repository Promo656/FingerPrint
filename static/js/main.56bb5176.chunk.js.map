{"version":3,"sources":["DAL/API/api.ts","BLL/reducers/dataReducer.tsx","BLL/Tools/FingerPrint.ts","BLL/reducers/fingerPrintReducer.tsx","BLL/reducers/visitorCounterReducer.tsx","BLL/reducers/usersReducer.tsx","BLL/reducers/appReducer.tsx","App.tsx","reportWebVitals.ts","BLL/Store/redux-store.ts","index.tsx"],"names":["UserAPI","axios","get","response","ip","data","query","ipInfo","num","put","count","payload","users","initialState","security","vpn","proxy","tor","location","city","region","country","continent","region_code","country_code","continent_code","latitude","longitude","time_zone","locale_code","metro_code","is_in_european_union","network","autonomous_system_number","autonomous_system_organization","SET_DATA","getfp","a","FingerprintJS","load","fp","result","visitorId","userPlatform","setUsersDataAC","type","initialized","SET_INITIALIZED","App","this","props","setInitializedTC","provider","viewCount","React","Component","connect","store","app","currentIpUserInfo","dispatch","getState","viewCountData","console","log","window","navigator","platform","id","currentFPUserInfo","savedUsers","filter","el","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thinkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAGaA,EAAU,WACA,OAAD,8HACOC,IAAMC,IAAN,sCADP,cACVC,EADU,OAEVC,EAAKD,EAASE,KAAKC,MAFT,SAGKL,IAAMC,IAAN,oEAAuEE,EAAvE,0CAHL,cAGVG,EAHU,yBAIPA,EAAOF,MAJA,8CADTL,EAAU,WAOO,OAAD,0HACAC,IAAMC,IAAN,mDADA,cACjBC,EADiB,yBAEdA,EAASE,MAFK,8CAPhBL,EAAU,SAWEQ,GAAc,OAAD,0HACTP,IAAMQ,IAAN,kDAA6D,CAACC,MAAOF,IAD5D,cAC1BL,EAD0B,yBAEvBA,EAASE,MAFc,8CAXzBL,EAAU,SAgBIW,GAAqB,OAAD,0HAClBV,IAAMQ,IAAN,sDAAiE,CAACG,MAAOD,EAAQC,QAD/D,cACnCT,EADmC,yBAEhCA,EAASE,MAFuB,8CAhBlCL,EAAU,WAoBG,OAAD,0HACIC,IAAMC,IAAN,uDADJ,cACbC,EADa,yBAEVA,EAASE,MAFC,8CCWrBQ,EAAyB,CACzBT,GAAI,GACJU,SAAU,CACNC,KAAK,EACLC,OAAO,EACPC,KAAK,GAETC,SAAU,CACNC,KAAM,GACNC,OAAQ,GACRC,QAAS,GACTC,UAAW,GACXC,YAAa,GACbC,aAAc,GACdC,eAAgB,GAChBC,SAAU,GACVC,UAAW,GACXC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZC,sBAAsB,GAE1BC,QAAS,CACLA,QAAS,GACTC,yBAA0B,GAC1BC,+BAAgC,KAiBlCC,EAAW,uB,QC1EV,SAAeC,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACcC,IAAcC,OAD5B,cACGC,EADH,gBAEkBA,EAAGtC,IAAI,IAFzB,cAEGuC,EAFH,yBAGIA,EAAOC,WAHX,4C,sBCmIP,IAAI7B,EAAgC,CAChC6B,UAAW,GACXC,aAAa,IAiBXR,EAAW,8BC/IbtB,EAA8B,CAC9BH,MAAO,GAiBLyB,EAAW,0B,QCYbtB,EAA0B,CAE1BD,MAAO,IAoBLuB,EAAW,wBAKJS,EAAiB,SAACjC,GAAD,MAAoC,CAC9DkC,KAAMV,EACNxB,QAASA,ICrDTE,EAAgC,CAChCiC,aAAa,GAiBXC,EAAkB,kBCdlBC,E,kLAGEC,KAAKC,MAAMC,qB,+BAIX,OAAKF,KAAKC,MAAMJ,YAKZ,gCACI,+FAAwBG,KAAKC,MAAM9C,MACnC,yJAAgC6C,KAAKC,MAAM7B,QAA3C,aAAuD4B,KAAKC,MAAM/B,QAClE,oHAAyB8B,KAAKC,MAAME,YACpC,8JAAgCH,KAAKC,MAAMG,gBARxC,c,GARDC,IAAMC,WA+BTC,eATS,SAACC,GAAD,MAAuB,CAC3CX,YAAaW,EAAMC,IAAIZ,YACvB1C,GAAIqD,EAAME,kBAAkBvD,GAC5BiD,UAAWI,EAAMJ,UAAU3C,MAC3BS,KAAMsC,EAAME,kBAAkBzC,SAASE,OACvCC,QAASoC,EAAME,kBAAkBzC,SAASG,QAC1C+B,SAAUK,EAAME,kBAAkB3B,QAAQE,kCAGN,CAACiB,iBDTT,yDAAM,WAAOS,EAAwBC,GAA/B,iBAAAxB,EAAA,sEAGbrC,IAHa,cAG9BG,EAH8B,gBAI5ByD,EAAShB,EAAezC,IAJI,uBAMRH,IANQ,cAM9B8D,EAN8B,OAOlCF,EFhBkE,CAClEf,KAAMV,EACNxB,QEcwBmD,IAPU,UAU5BF,ELmCe,uCAAM,WAAOA,GAAP,eAAAvB,EAAA,sEACNrC,IADM,OACvBG,EADuB,OAE3B4D,QAAQC,IAAI7D,GACZyD,EARmD,CACnDf,KAAMV,EACNxB,QAMmBR,IAHQ,2CAAN,uDK7Ca,yBAW5ByD,EH8GsB,uCAAM,WAAOA,GAAP,iBAAAvB,EAAA,sEACZD,IADY,cAC9BM,EAD8B,gBAETuB,OAAOC,UAAUC,SAFR,OAE9BxB,EAF8B,OAGlCiB,EAR+D,CAC/Df,KAAMV,EACNxB,QAMmB,CAAC+B,YAAWC,kBAHG,2CAAN,uDGzHM,yBAa5BiB,EDiBoB,uCAAM,WAAOA,EAAyBC,GAAhC,mBAAAxB,EAAA,sDAI5B+B,EAAKP,IAAWQ,kBAAkB3B,UAClCtC,EAAKyD,IAAWF,kBAAkBvD,GAClC+D,EAAWN,IAAWQ,kBAAkB1B,aAKf,IAFTkB,IAAWS,WAAW1D,MAAM2D,QAAO,SAAAC,GAAE,OAAIA,EAAGJ,KAAOA,GAAMI,EAAGpE,KAAOA,GAAMoE,EAAGL,WAAWA,KAEzFM,SACdb,EAAShB,EAAe,CAAChC,MAAO,CAAC,CAACwD,KAAIhE,KAAI+D,gBAC1CnE,EAAyB6D,IAAWS,YACpCV,EDhD0B,uCAAM,WAAOA,EAAyBC,GAAhC,eAAAxB,EAAA,6DAgB9B3B,EAAQmD,IAAWR,UAAU3C,OAAS,EAhBR,SAiB9BV,EAAuBU,GAjBO,2CAAN,0DCkCE,2CAAN,yDC9BQ,QAelCkD,EAnBqD,CACrDf,KAAME,IAG4B,4CAAN,0DCSjBS,CAA6CR,GCpC7C0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCARQ,EAAWC,YAAgB,CAC7B1B,IHSsB,WAAiF,IAAhF2B,EAA+E,uDAAtDxE,EAAcyE,EAAwC,uCACtG,OAAQA,EAAOzC,MACX,KAAKE,EACD,OAAO,2BACAsC,GADP,IAEIvC,aAAa,IAGrB,QACI,OAAOuC,IGjBf1B,kBRoDuB,WAAiE,IAAhE0B,EAA+D,uDAA9CxE,EAAcyE,EAAgC,uCACvF,OAAQA,EAAOzC,MACX,KAAKV,EACD,OAAO,2BACAkD,GACAC,EAAO3E,SAGlB,QACI,OAAO0E,IQ5DfhB,kBN8H8B,WAA+C,IAA9CgB,EAA6C,uDAArCxE,EAAcyE,EAAuB,uCAC5E,OAAQA,EAAOzC,MACX,KAAKV,EACD,OAAO,2BACAkD,GACAC,EAAO3E,SAGlB,QACI,OAAO0E,IMtIfhC,ULA8B,WAA6E,IAA5EgC,EAA2E,uDAApDxE,EAAcyE,EAAsC,uCAC1G,OAAQA,EAAOzC,MACX,KAAKV,EACD,OAAO,2BACAkD,GADP,IAEI3E,MAAO4E,EAAO3E,QAAQD,QAG9B,QACI,OAAO2E,IKRff,WJgCwB,WAAqE,IAApEe,EAAmE,uDAAhDxE,EAAcyE,EAAkC,uCAC5F,OAAQA,EAAOzC,MACX,KAAKV,EACD,OAAO,2BACAkD,GADP,IAGIzE,MAAM,GAAD,mBAAMyE,EAAMzE,OAAZ,YAAsB0E,EAAO3E,QAAQC,UAGlD,QACI,OAAOyE,MIxCbE,EAAoBtB,OAAeuB,sCAAwCC,IACpEhC,EAAQiC,YAAYP,EAAUI,EAAiBI,YAAgBC,OAG5E3B,OAAOR,MAAQA,ECZfoC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUtC,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRuC,SAASC,eAAe,SAM5BvB,M","file":"static/js/main.56bb5176.chunk.js","sourcesContent":["import axios from \"axios\"\r\nimport {UsersType} from \"../../BLL/reducers/usersReducer\";\r\n\r\nexport const UserAPI = {\r\n    async getIpData() {\r\n        let response = await axios.get(`https://extreme-ip-lookup.com/json`)\r\n        let ip = response.data.query\r\n        let ipInfo = await axios.get(`https://cors-anywhere.herokuapp.com/https://vpnapi.io/api/${ip}?key=d0eee3cfcb5340b0875925e966cde0de`)\r\n        return ipInfo.data\r\n    },\r\n    async getViewCountData() {\r\n        let response = await axios.get(`https://counter-d86e4.firebaseio.com/count.json`)\r\n        return response.data\r\n    },\r\n    async incrementCount(num: number) {\r\n        let response = await axios.put(`https://counter-d86e4.firebaseio.com/count.json`, {count: num})\r\n        return response.data\r\n    },\r\n\r\n    async writeInformation(payload: UsersType) {\r\n        let response = await axios.put(`https://counter-d86e4.firebaseio.com/userDdata.json`, {users: payload.users})\r\n        return response.data\r\n    },\r\n    async getUsersInfo() {\r\n        let response = await axios.get(`https://counter-d86e4.firebaseio.com/userDdata.json`)\r\n        return response.data\r\n    }\r\n}\r\n","import {UserAPI} from \"../../DAL/API/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype DataType = {\r\n    \"ip\": string,\r\n    \"security\": {\r\n        \"vpn\": boolean,\r\n        \"proxy\": boolean,\r\n        \"tor\": boolean\r\n    },\r\n    \"location\": {\r\n        \"city\": string,\r\n        \"region\": string,\r\n        \"country\": string,\r\n        \"continent\": string,\r\n        \"region_code\": string,\r\n        \"country_code\": string,\r\n        \"continent_code\": string,\r\n        \"latitude\": string,\r\n        \"longitude\": string,\r\n        \"time_zone\": string,\r\n        \"locale_code\": string,\r\n        \"metro_code\": string,\r\n        \"is_in_european_union\": boolean\r\n    },\r\n    \"network\": {\r\n        \"network\": string,\r\n        \"autonomous_system_number\": string,\r\n        \"autonomous_system_organization\": string\r\n    }\r\n}\r\n\r\nlet initialState: DataType = {\r\n    ip: \"\",\r\n    security: {\r\n        vpn: false,\r\n        proxy: false,\r\n        tor: false\r\n    },\r\n    location: {\r\n        city: \"\",\r\n        region: \"\",\r\n        country: \"\",\r\n        continent: \"\",\r\n        region_code: \"\",\r\n        country_code: \"\",\r\n        continent_code: \"\",\r\n        latitude: \"\",\r\n        longitude: \"\",\r\n        time_zone: \"\",\r\n        locale_code: \"\",\r\n        metro_code: \"\",\r\n        is_in_european_union: false\r\n    },\r\n    network: {\r\n        network: \"\",\r\n        autonomous_system_number: \"\",\r\n        autonomous_system_organization: \"\"\r\n    }\r\n}\r\n\r\nexport const dataReducer = (state:DataType = initialState, action: ActionType):DataType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"dataReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: DataType\r\n}\r\nexport const setDataAC = (payload: any): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setDataTC = () => async (dispatch: Dispatch<any>) => {\r\n    let response = await UserAPI.getIpData()\r\n    console.log(response)\r\n    dispatch(setDataAC(response));\r\n\r\n\r\n}\r\n","import FingerprintJS from '@fingerprintjs/fingerprintjs'\r\n\r\nexport async function getfp() {\r\n    const fp = await FingerprintJS.load()\r\n    const result = await fp.get({})\r\n    return result.visitorId\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {getfp} from \"../Tools/FingerPrint\";\r\nimport {setUsersDataTC} from \"./usersReducer\";\r\n\r\ntype ActionType = SetDataAT\r\n/*type FingerPrintType = {\r\n    audio: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    availableScreenResolution: {\r\n        value: Array<number>\r\n        duration: number\r\n    }\r\n    canvas: {\r\n        value: {\r\n            data: string\r\n            winding: boolean\r\n        }\r\n        duration: number\r\n    }\r\n    chrome: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    colorDepth: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    cookiesEnabled: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    cpuClass: {\r\n        value: any\r\n        duration: number\r\n    }\r\n    deviceMemory: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    emptyEvalLength: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    errorFF: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    fonts: {\r\n        value: Array<string>\r\n        duration: number\r\n    }\r\n    hardwareConcurrency: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    indexedDB: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    languages: {\r\n        value: Array<Array<string>>\r\n        duration: number\r\n    }\r\n    localStorage: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    openDatabase: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    osCpu: {\r\n        value: any\r\n        duration: number\r\n    }\r\n    platform: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    plugins: {\r\n        value: Array<{\r\n            description: string\r\n            name: string\r\n            mimeTypes: Array<{\r\n                suffixes: string\r\n                type: string\r\n            }>\r\n        }>\r\n        duration: number\r\n    }\r\n    pluginsSupport: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    productSub: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    screenResolution: {\r\n        value: Array<number>\r\n        duration: number\r\n    }\r\n    sessionStorage: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    timezone: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    timezoneOffset: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    touchSupport: {\r\n        value: {\r\n            maxTouchPoints: number\r\n            touchEvent: boolean\r\n            touchStart: boolean\r\n        }\r\n        duration: number\r\n    }\r\n    vendor: {\r\n        value: string\r\n        duration: number\r\n    }\r\n}*/\r\ntype FingerPrintType = {\r\n    visitorId: string\r\n    userPlatform:string\r\n}\r\nlet initialState: FingerPrintType = {\r\n    visitorId: \"\",\r\n    userPlatform:\"\"\r\n}\r\n\r\nexport const fingerPrintReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"fingerPrintReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: FingerPrintType\r\n}\r\nexport const setDataAC = (payload: FingerPrintType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setFingerPrintTC = () => async (dispatch: Dispatch<any>) => {\r\n    let visitorId = await getfp()\r\n    let userPlatform = await window.navigator.platform\r\n    dispatch(setDataAC({visitorId ,userPlatform,}))\r\n\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {UserAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"../Store/redux-store\";\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype ViewCountType = {\r\n    count: number\r\n}\r\nlet initialState: ViewCountType = {\r\n    count: 0\r\n}\r\n\r\nexport const viewCounterReducer = (state: ViewCountType = initialState, action: ActionType): ViewCountType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                count: action.payload.count\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"counterReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: ViewCountType\r\n}\r\nexport const setCountDataAC = (payload: ViewCountType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setViewCountDataTC = () => async (dispatch: Dispatch<any>, getState: () => StateType) => {\r\n\r\n   /* let viewCountData = await UserAPI.getViewCountData()\r\n    console.log(viewCountData)\r\n    dispatch(setCountDataAC(viewCountData))*/\r\n\r\n\r\n/*    let newId = getState().currentFPUserInfo.visitorId\r\n    let newIp = getState().currentIpUserInfo.query\r\n\r\n\r\n    let filteredArray = getState().savedUsers.users.filter(el => el.id === newId || el.ip === newIp)\r\n\r\n    if (filteredArray.length === 0) {\r\n\r\n    }*/\r\n    const count = getState().viewCount.count += 1\r\n    await UserAPI.incrementCount(count)\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {UserAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"../Store/redux-store\";\r\nimport {getfp} from \"../Tools/FingerPrint\";\r\nimport {setViewCountDataTC} from \"./visitorCounterReducer\";\r\n\r\n/*\r\ntype UserType = {\r\n    user: {\r\n        id: string\r\n        ip: string\r\n    }\r\n\r\n}\r\ntype UsersType = {\r\n    users: UserType\r\n    usersCount: number\r\n}\r\nlet initialState: UsersType = {\r\n    usersCount: 0,\r\n    users: {\r\n        user: {id: \"\", ip: \"\"},\r\n        user:{id: \"\", ip: \"\"}\r\n    }\r\n}\r\n*/\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype UserType = {\r\n    id: string\r\n    ip: string\r\n    platform:string\r\n\r\n}\r\nexport type UsersType = {\r\n    users: UserType[]\r\n\r\n}\r\nlet initialState: UsersType = {\r\n\r\n    users: [\r\n        /*  {ip:\"\",id:\"\"}*/\r\n    ]\r\n}\r\n\r\nexport const usersReducer = (state: UsersType = initialState, action: ActionType): UsersType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n\r\n                users: [...state.users, ...action.payload.users]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"usersReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: UsersType\r\n}\r\nexport const setUsersDataAC = (payload: UsersType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setUsersDataTC = () => async (dispatch: Dispatch<any>, getState: () => StateType) => {\r\n    /* let response = await UserAPI.getUsersInfo()\r\n     dispatch(setUsersDataAC(response))*/\r\n\r\n    let id = getState().currentFPUserInfo.visitorId\r\n    let ip = getState().currentIpUserInfo.ip\r\n    let platform = getState().currentFPUserInfo.userPlatform\r\n\r\n\r\n    let filteredArray = getState().savedUsers.users.filter(el => el.id === id || el.ip === ip || el.platform===platform)\r\n\r\n    if (filteredArray.length === 0) {\r\n        dispatch(setUsersDataAC({users: [{id, ip, platform}]}))\r\n        UserAPI.writeInformation(getState().savedUsers)\r\n        dispatch(setViewCountDataTC())\r\n    }\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {setDataTC} from \"./dataReducer\";\r\nimport {setFingerPrintTC} from \"./fingerPrintReducer\";\r\nimport {setCountDataAC, setViewCountDataTC} from \"./visitorCounterReducer\";\r\nimport {setUsersDataAC, setUsersDataTC} from \"./usersReducer\";\r\nimport {UserAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"../Store/redux-store\";\r\n\r\n\r\ntype ActionType = SetInitializedAT\r\n\r\ntype InitializedType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitializedType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitializedType = initialState, action: ActionType): InitializedType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-INITIALIZED-AC-------------------------------\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\ntype SetInitializedAT = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\nexport const setInitializedAC = (): SetInitializedAT => ({\r\n    type: SET_INITIALIZED\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setInitializedTC = () => async (dispatch: Dispatch<any>,getState: () => StateType) => {\r\n\r\n\r\n    let response = await UserAPI.getUsersInfo()\r\n    await dispatch(setUsersDataAC(response))\r\n\r\n    let viewCountData = await UserAPI.getViewCountData()\r\n    dispatch(setCountDataAC(viewCountData))\r\n\r\n\r\n    await dispatch(setDataTC())\r\n    await dispatch(setFingerPrintTC())\r\n    //await dispatch(setViewCountDataTC())\r\n    await dispatch(setUsersDataTC())\r\n\r\n    dispatch(setInitializedAC())\r\n\r\n    /*Promise.all([pr1, pr2]).then(() => {\r\n        Promise.all([pr3]).then(() => {\r\n            Promise.all([pr4]).then(()=>{\r\n\r\n            })\r\n        })\r\n    })*/\r\n\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"./BLL/Store/redux-store\";\r\nimport {setInitializedTC} from \"./BLL/reducers/appReducer\";\r\nimport {UserAPI} from \"./DAL/API/api\";\r\n\r\ntype MSTP = {\r\n    initialized: boolean\r\n    ip: string\r\n    viewCount: number\r\n    city: string\r\n    country: string\r\n    provider: string\r\n}\r\ntype MDTP = {\r\n    setInitializedTC: () => void\r\n}\r\ntype AppPropsType = MSTP & MDTP\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n\r\n        this.props.setInitializedTC()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return \"Loading\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>{`Ваш IP адрес : ${this.props.ip}`}</div>\r\n                <div>{`Ваше местоположение: : ${this.props.country}, ${this.props.city}`}</div>\r\n                <div>{`Ваш провайдер : ${this.props.provider}`}</div>\r\n                <div>{`Количество посещений : ${this.props.viewCount}`}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store: StateType) => ({\r\n    initialized: store.app.initialized,\r\n    ip: store.currentIpUserInfo.ip,\r\n    viewCount: store.viewCount.count,\r\n    city: store.currentIpUserInfo.location.region,\r\n    country: store.currentIpUserInfo.location.country,\r\n    provider: store.currentIpUserInfo.network.autonomous_system_organization\r\n})\r\n\r\nexport default connect(mapStateToProps, {setInitializedTC})(App)\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thinkMiddleware from \"redux-thunk\"\r\nimport {appReducer} from \"../reducers/appReducer\";\r\nimport {dataReducer} from \"../reducers/dataReducer\";\r\nimport {fingerPrintReducer} from \"../reducers/fingerPrintReducer\";\r\nimport {viewCounterReducer} from \"../reducers/visitorCounterReducer\";\r\nimport {usersReducer} from \"../reducers/usersReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    currentIpUserInfo: dataReducer,\r\n    currentFPUserInfo: fingerPrintReducer,\r\n    viewCount: viewCounterReducer,\r\n    savedUsers: usersReducer\r\n})\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thinkMiddleware)))\r\nexport type StateType = ReturnType<typeof reducers>\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./BLL/Store/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}