{"version":3,"sources":["DAL/API/api.ts","BLL/reducers/dataReducer.tsx","BLL/Tools/FingerPrint.ts","BLL/reducers/fingerPrintReducer.tsx","BLL/reducers/counterReducer.tsx","BLL/reducers/appReducer.tsx","App.tsx","reportWebVitals.ts","BLL/Store/redux-store.ts","index.tsx"],"names":["UserAPI","axios","get","response","data","num","put","count","initialState","businessName","businessWebsite","city","continent","country","countryCode","ipName","ipType","isp","lat","lon","org","query","region","status","SET_DATA","getfp","a","FingerprintJS","load","fp","result","audio","value","duration","availableScreenResolution","canvas","winding","chrome","colorDepth","cookiesEnabled","cpuClass","deviceMemory","emptyEvalLength","errorFF","fonts","hardwareConcurrency","indexedDB","languages","localStorage","openDatabase","osCpu","platform","plugins","description","name","mimeTypes","suffixes","type","pluginsSupport","productSub","screenResolution","sessionStorage","timezone","timezoneOffset","touchSupport","maxTouchPoints","touchEvent","touchStart","vendor","setCountDataAC","payload","initialized","SET_INITIALIZED","App","this","props","setInitializedTC","ip","provider","viewCount","React","Component","connect","store","app","dispatch","pr1","pr2","fingerPrint","console","log","pr3","getState","viewCountData","Promise","all","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thinkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1088a09e.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nexport const UserAPI = {\r\n    async getData() {\r\n        let response = await axios.get(`https://extreme-ip-lookup.com/json`)\r\n        return response.data\r\n    },\r\n    async getViewCountData() {\r\n        let response = await axios.get(`https://counter-d86e4.firebaseio.com/count.json`)\r\n        return response.data\r\n    },\r\n    async incrementCount(num:number) {\r\n        let response = await axios.put(`https://counter-d86e4.firebaseio.com/count.json`,{count:num})\r\n        return response.data\r\n    }\r\n}\r\n","import {UserAPI} from \"../../DAL/API/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionType = SetDataAT\r\n\r\ntype DataType = {\r\n    businessName: string\r\n    businessWebsite: string\r\n    city: string\r\n    continent: string\r\n    country: string\r\n    countryCode: string\r\n    ipName: string\r\n    ipType: string\r\n    isp: string\r\n    lat: string\r\n    lon: string\r\n    org: string\r\n    query: string\r\n    region: string\r\n    status: string\r\n}\r\n\r\nlet initialState: DataType = {\r\n    businessName: \" \",\r\n    businessWebsite: \"\",\r\n    city: \"\",\r\n    continent: \"\",\r\n    country: \"\",\r\n    countryCode: \"\",\r\n    ipName: \"\",\r\n    ipType: \"\",\r\n    isp: \"\",\r\n    lat: \"\",\r\n    lon: \"\",\r\n    org: \"\",\r\n    query: \"\",\r\n    region: \"\",\r\n    status: \"\"\r\n}\r\n\r\nexport const dataReducer = (state: DataType = initialState, action: ActionType): DataType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"dataReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: DataType\r\n}\r\nexport const setDataAC = (payload: DataType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setDataTC = () => async (dispatch: Dispatch) => {\r\n    let response = await UserAPI.getData()\r\n    dispatch(setDataAC(response))\r\n}","import FingerprintJS from '@fingerprintjs/fingerprintjs'\r\n\r\nexport async function getfp() {\r\n    const fp = await FingerprintJS.load()\r\n    const result = await fp.get()\r\n    return result\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {getfp} from \"../Tools/FingerPrint\";\r\n\r\ntype ActionType = SetDataAT\r\ntype FingerPrintType = {\r\n    audio: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    availableScreenResolution: {\r\n        value: Array<number>\r\n        duration: number\r\n    }\r\n    canvas: {\r\n        value: {\r\n            data: string\r\n            winding: boolean\r\n        }\r\n        duration: number\r\n    }\r\n    chrome: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    colorDepth: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    cookiesEnabled: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    cpuClass: {\r\n        value: any\r\n        duration: number\r\n    }\r\n    deviceMemory: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    emptyEvalLength: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    errorFF: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    fonts: {\r\n        value: Array<string>\r\n        duration: number\r\n    }\r\n    hardwareConcurrency: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    indexedDB: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    languages: {\r\n        value: Array<Array<string>>\r\n        duration: number\r\n    }\r\n    localStorage: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    openDatabase: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    osCpu: {\r\n        value: any\r\n        duration: number\r\n    }\r\n    platform: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    plugins: {\r\n        value: Array<{\r\n            description: string\r\n            name: string\r\n            mimeTypes: Array<{\r\n                suffixes: string\r\n                type: string\r\n            }>\r\n        }>\r\n        duration: number\r\n    }\r\n    pluginsSupport: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    productSub: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    screenResolution: {\r\n        value: Array<number>\r\n        duration: number\r\n    }\r\n    sessionStorage: {\r\n        value: boolean\r\n        duration: number\r\n    }\r\n    timezone: {\r\n        value: string\r\n        duration: number\r\n    }\r\n    timezoneOffset: {\r\n        value: number\r\n        duration: number\r\n    }\r\n    touchSupport: {\r\n        value: {\r\n            maxTouchPoints: number\r\n            touchEvent: boolean\r\n            touchStart: boolean\r\n        }\r\n        duration: number\r\n    }\r\n    vendor: {\r\n        value: string\r\n        duration: number\r\n    }\r\n}\r\n\r\nlet initialState: FingerPrintType = {\r\n    audio: {\r\n        value: 0,\r\n        duration: 0\r\n    },\r\n    availableScreenResolution: {\r\n        value: [0, 0],\r\n        duration: 0\r\n    },\r\n    canvas: {\r\n        value: {\r\n            data: \"\",\r\n            winding: false\r\n        },\r\n        duration: 8\r\n    },\r\n    chrome: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    colorDepth: {\r\n        value: 0,\r\n        duration: 0\r\n    },\r\n    cookiesEnabled: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    cpuClass: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    deviceMemory: {\r\n        value: 8,\r\n        duration: 0\r\n    },\r\n    emptyEvalLength: {\r\n        value: 33,\r\n        duration: 0\r\n    },\r\n    errorFF: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    fonts: {\r\n        value: [],\r\n        duration: 0\r\n    },\r\n    hardwareConcurrency: {\r\n        value: 4,\r\n        duration: 0\r\n    },\r\n    indexedDB: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    languages: {\r\n        value: [[\"\"]],\r\n        duration: 0\r\n    },\r\n    localStorage: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    openDatabase: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    osCpu: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    platform: {\r\n        value: \"\",\r\n        duration: 0\r\n    },\r\n    plugins: {\r\n        value: [\r\n            {\r\n                description: \"\",\r\n                name: \"\",\r\n                mimeTypes: [\r\n                    {\r\n                        suffixes: \"\",\r\n                        type: \"\"\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        duration: 0\r\n    },\r\n    pluginsSupport: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    productSub: {\r\n        value: \"\",\r\n        duration: 0\r\n    },\r\n    screenResolution: {\r\n        value: [],\r\n        duration: 0\r\n    },\r\n    sessionStorage: {\r\n        value: false,\r\n        duration: 0\r\n    },\r\n    timezone: {\r\n        value: \"\",\r\n        duration: 0\r\n    },\r\n    timezoneOffset: {\r\n        value: 0,\r\n        duration: 0\r\n    },\r\n    touchSupport: {\r\n        value: {\r\n            maxTouchPoints: 0,\r\n            touchEvent: false,\r\n            touchStart: false\r\n        },\r\n        duration: 0\r\n    },\r\n    vendor: {\r\n        value: \"\",\r\n        duration: 0\r\n    }\r\n}\r\n\r\nexport const fingerPrintReducer = (state: FingerPrintType = initialState, action: ActionType): FingerPrintType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"fingerPrintReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: FingerPrintType\r\n}\r\nexport const setDataAC = (payload: any): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setFingerPrintTC = () => async (dispatch: Dispatch) => {\r\n    let fingerPrint = await getfp()\r\n    console.log(fingerPrint)\r\n\r\n    dispatch(setDataAC(fingerPrint))\r\n\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {UserAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"../Store/redux-store\";\r\n\r\ntype ActionType = SetDataAT\r\ntype ViewCountType = {\r\n    count: number\r\n}\r\nlet initialState: ViewCountType = {\r\n    count: 0\r\n}\r\n\r\nexport const viewCounterReducer = (state: ViewCountType = initialState, action: ActionType): ViewCountType => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            return {\r\n                ...state,\r\n                count: action.payload.count\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-DATA-AC-------------------------------\r\nconst SET_DATA = \"counterReducer/SET_DATA\"\r\ntype SetDataAT = {\r\n    type: typeof SET_DATA\r\n    payload: ViewCountType\r\n}\r\nexport const setCountDataAC = (payload: ViewCountType): SetDataAT => ({\r\n    type: SET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setViewCountDataTC = () => async (dispatch: Dispatch, getState: () => StateType) => {\r\n\r\n    let viewCountData = await UserAPI.getViewCountData()\r\n    dispatch(setCountDataAC(viewCountData))\r\n\r\n    const count = getState().viewCount.count+=1\r\n\r\n    await UserAPI.incrementCount(count)\r\n\r\n    dispatch(setCountDataAC(viewCountData))\r\n}","import {Dispatch} from \"redux\";\r\nimport {setDataTC} from \"./dataReducer\";\r\nimport {setFingerPrintTC} from \"./fingerPrintReducer\";\r\nimport {setViewCountDataTC} from \"./counterReducer\";\r\nimport {StateType} from \"../Store/redux-store\";\r\n\r\n\r\ntype ActionType = SetInitializedAT\r\n\r\ntype InitializedType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitializedType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitializedType = initialState, action: ActionType): InitializedType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n//--------------------------------------SET-INITIALIZED-AC-------------------------------\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\ntype SetInitializedAT = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\nexport const setInitializedAC = (): SetInitializedAT => ({\r\n    type: SET_INITIALIZED\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const setInitializedTC = () => (dispatch: Dispatch<any>) => {\r\n    let pr1 = dispatch(setDataTC())\r\n    let pr2 = dispatch(setFingerPrintTC())\r\n    let pr3 = dispatch(setViewCountDataTC())\r\n    Promise.all([pr1, pr2, pr3]).then(() => {\r\n        dispatch(setInitializedAC())\r\n    })\r\n\r\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {StateType} from \"./BLL/Store/redux-store\";\nimport {setInitializedTC} from \"./BLL/reducers/appReducer\";\n\ntype MSTP = {\n    initialized: boolean\n    ip: string\n    ipName: string\n    viewCount: number\n    city: string\n    country: string\n    provider: string\n}\ntype MDTP = {\n    setInitializedTC: () => void\n}\ntype AppPropsType = MSTP & MDTP\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n\n        this.props.setInitializedTC()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return \"Loading\"\n        }\n\n        return (\n            <div>\n                <div>{`Ваш IP адрес : ${this.props.ip}`}</div>\n                <div>{`Имя вашего компьютера : ${this.props.ipName}`}</div>\n                <div>{`Ваше местоположение: : ${this.props.country}, ${this.props.city}`}</div>\n                <div>{`Ваш провайдер : ${this.props.provider}`}</div>\n                <div>{`Количество посещений : ${this.props.viewCount}`}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: StateType) => ({\n    initialized: store.app.initialized,\n    ip: store.data.query,\n    ipName: store.data.ipName,\n    viewCount: store.viewCount.count,\n    city: store.data.region,\n    country: store.data.country,\n    provider: store.data.org\n})\n\nexport default connect(mapStateToProps, {setInitializedTC})(App)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thinkMiddleware from \"redux-thunk\"\r\nimport {appReducer} from \"../reducers/appReducer\";\r\nimport {dataReducer} from \"../reducers/dataReducer\";\r\nimport {fingerPrintReducer} from \"../reducers/fingerPrintReducer\";\r\nimport {viewCounterReducer} from \"../reducers/counterReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    data: dataReducer,\r\n    fingerPrint: fingerPrintReducer,\r\n    viewCount: viewCounterReducer\r\n})\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thinkMiddleware)))\r\nexport type StateType = ReturnType<typeof reducers>\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./BLL/Store/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}